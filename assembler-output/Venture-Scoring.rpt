              ; Start locations for page 1 and page 2
              ; to avoid use of top of stack.
              ; Page 2 must be a page boundary to ensure
              ; messages in following page are read correctly

              PART1 = $0100
              PART2 = $0200
              PART3 = $1780

              TIMER  = $1706
              PADD   = $1741
              KEYS   = $1F3D
              CONVD  = $1F48
              GETKEY = $1F6A
              DIGCOD = $1FE7

              ; KIM-VENTURE Â© Copyright R.C.Leedom 1979
              ;
              ** = $0000
              ; LIGHT Subroutine. Lights KIM 7-segment dis-
              ;      plays with character-codes contained
              ;      in table WINDO.  On return, key from
              ;      keyboard is in A-reg (else A-reg=$15).
              ;      Y-reg is preserved.
0000 84 EF    LIGHT:  STY YSAV     ; Save Y-register
0002 A0 00            LDY #0
0004 A9 7F            LDA #$7F     ; Set directional
0006 8D 41 17         STA PADD     ;    registers.
0009 A2 09            LDX #9       ; Start with leftmost
000B 84 FC    LITELP: STY TEMP     ;    character.
000D B9 F0 00         LDA WINDO,Y  ; Get char to be shown.
0010 20 4E 1F         JSR CONVD+6  ; Use KIM monitor subr.
0013 C8               INY          ; Next char on right ...
0014 C0 06            CPY #6       ; Done all six yet?
0016 90 F3            BCC LITELP   ; Not yet. Continue.
              ;
0018 20 3D 1F KBG:    JSR KEYS     ; Before return, sample
001B 20 6A 1F         JSR GETKEY   ;    the KIM keyboard.
001E A4 EF            LDY YSAV     ; Restore Y-register.
0020 60               RTS
              ** = $0021
              ;
              ; Character look-up table.  Frequently-used
              ;      characters stored as 4-bit pointers
              ;      into part of this table (FUTBL). In-
              ;      frequently-used characters stored as
              ;      8-bit pointers into the other part
              ;      (IUTBL).  Note that the last two en-
              ;      tries are variables, used for special
              ;      program-controllable characters.
              ;
              ;                  Index Character
0021 77       FUTBL:  .BYTE $77 ;   2     A
0022 39               .BYTE $39 ;   3     C
0023 5E               .BYTE $5E ;   4     D
0024 79               .BYTE $79 ;   5     E
0025 76               .BYTE $76 ;   6     H
0026 06               .BYTE $06 ;   7     I
0027 38               .BYTE $38 ;   8     L
0028 54               .BYTE $54 ;   9     N
0029 5C               .BYTE $5C ;   A     O
002A 50               .BYTE $50 ;   B     R
002B 6D               .BYTE $6D ;   C     S
002C 78               .BYTE $78 ;   D     T
002D 1C               .BYTE $1C ;   E     U
002E 00               .BYTE $00 ;   F     (blank)
002F 40       IUTBL:  .BYTE $40 ;  10     - (dash)
0030 7C               .BYTE $7C ;  11     B
0031 71               .BYTE $71 ;  12     F
0032 3D               .BYTE $3D ;  13     G
              ;                  (continuation of IUTBL)
0033 1E               .BYTE $1E ;  14     J
0034 37               .BYTE $37 ;  15     M
0035 73               .BYTE $73 ;  16     P
0036 3E               .BYTE $3E ;  17     W
0037 6E               .BYTE $6E ;  18     Y
0038 53               .BYTE $53 ;  19     ?
0039 08               .BYTE $08 ;  1A     . (period)
003A 5B               .BYTE $5B ;  1B     2
003B 00       SGNPST: .BYTE $00 ;  1C     Variable (signpost)
003C 00       MBCODE: .BYTE $00 ;  1D     Variable (? or magic
              ;                                     button)
              ;
              ; Program variables (except for a very few
              ;      located elsewhere)
003D 00       NMBUTS: .BYTE $00 ; No. of magic button uses
003E 00       BURDEN: .BYTE $00 ; Bit #n set if carrying object #n.
003F 00       DLOBAD: .BYTE $00 ; Abs address of obj to be deleted.
0040 FF       DRAGON: .BYTE $FF ; FF=hungry; 0=dead; 1=full.
0041 EC       EGOLAD: .BYTE $EC ; Current address of EGO file.
0042 00       LOCAD:  .BYTE $00 ; Addr of current location file.
0043 00       LINTAX: .BYTE $00 ; Pointer: 0=EGOLAD; 1=LOCAD
0044 00       LOBJAD: .BYTE $00 ; Addr of last obj in file, or
                               ;      of object of interest.
0045 0B       LOCNUM: .BYTE $0B ; Number of current location.
0046 FF       MBUT:   .BYTE $FF ; Current magic button (0 - F valid).
0047 00       NOBCRY: .BYTE $00 ; No. of objects carried (0 - 4).
0048 00       NOBS:   .BYTE $00 ; No. of objs to be displayed (0 - 7).
0049 00       OBJ:    .BYTE $00 ; Object identifier (0 - 7).
004A 00       POINTR: .BYTE $00 ; ADL of message
004B 03               .BYTE $03 ; ADH of message (Constant!)
004C 00       MOVES:  .BYTE $00 ; L.S. Half of number of moves.
              ;
              ; Program constants
              ;
004D 02       OBJMSK: .BYTE %00000010 ; (1) Bird    When obj is
004E 04               .BYTE %00000100 ; (2) Rope   picked up (or is
004F 08               .BYTE %00001000 ; (3) Rod    dropped), the
0050 10               .BYTE %00010000 ; (4) File   proper bit is
0051 20               .BYTE %00100000 ; (5) Cage   ORed into (or is
0052 40               .BYTE %01000000 ; (6) Pearls NANDed out of)
0053 80               .BYTE %10000000 ; (7) Gold   BURDEN.
              ;
              ; Message addresses.  These are the ADL's of
              ;      the messages, all of which are assumed
              ;      to reside in page 3 (see POINTR+1).
              ;      Order of this table is paramount!
              ;      There is a variable thrown in here to
              ;      separate ADOPGR and ADBRDG ...
0054 34       ADOPGR: .BYTE $34 ; Open Grate
0055 00       SCDU:   .BYTE $00 ; -1,0,1,2 : Browse, Carry,
                               ;            Drop, Use
0056 2B       ADBRDG: .BYTE $2B ; Bridge Across Gully
0057 BE       OBMSAD: .BYTE $BE ; (0) Dragon
0058 DC               .BYTE $DC ; (1) Bird
0059 43               .BYTE $43 ; (2) Rope
005A E4               .BYTE $E4 ; (3) Rod
005B 25               .BYTE $25 ; (4) File
005C 22               .BYTE $22 ; (5) Cage
005D 1C               .BYTE $1C ; (6) Pearls
005E 46               .BYTE $46 ; (7) Gold
005F 8C       UINMAD: .BYTE $8C ; You Are In
0060 89               .BYTE $89 ; You Are At
0061 B5               .BYTE $B5 ; I See -
0062 E7       CYMSAD: .BYTE $E7 ; Carry -
0063 D7               .BYTE $D7 ; Drop -
0064 AE               .BYTE $AE ; Use -
0065 06       LNAMAD: .BYTE $06 ; Cellar         0
0066 09               .BYTE $09 ; Purple Oracle  1
0067 11               .BYTE $11 ; Red Room       2
0068 18       ADSSM:  .BYTE $18 ; Stone Steps    3
0069 D3               .BYTE $D3 ; Blue Den       4
006A 3C       ADGRM:  .BYTE $3C ; Steel Grate    5
006B 4F               .BYTE $4F ; Hole           6
006C 38       ADGYM:  .BYTE $38 ; Gully          7
006D 7B       ADRHM:  .BYTE $7B ; Royal Hall     8
006E AB               .BYTE $AB ; House          9
006F DB               .BYTE $DB ; Bird Room      A
0070 70               .BYTE $70 ; Stream         B
0071 52       ADTSM:  .BYTE $52 ; Tight Shaft    C
0072 93               .BYTE $93 ; N. Pit         D
0073 EF               .BYTE $EF ; Grotto         E
0074 6A               .BYTE $6A ; Oyster-bed     F
0075 28               .BYTE $28 ; Chute         10
0076 73               .BYTE $73 ; E. Pit        11
0077 9B               .BYTE $9B ; Attic         12
0078 EB               .BYTE $EB ; S. Pit        13
0079 56               .BYTE $56 ; Tunnel        14
007A 5D               .BYTE $5D ; 2-Inch Slit   15
007B 82               .BYTE $82 ; Glen          16
007C F3               .BYTE $F3 ; Forest        17
              ;                        CAVE MAP
              ; Format for file for each location in caves is as follows:
              ;
              ;  Word #                           Contents
              ;    0      Bit 7 = 1, bit 6 = 0. Bit 5 = 1 if location has
              ;             been visited during the game.  Bits 4 - 0
              ;             contain the location number of this file.
              ;
              ;    1      Bit 7 = 0.  Bit 6 = 1 if magic button works
              ;              in this location.  bits 5,4,3,2,1,0 = 1 if
              ;              you can leave this location in the D,U,W,S,
              ;              E,N direction, respectively.  This word is
              ;              used as the "signpost" in the Cue message.
              ;
              ; next (up  Bit 7 = 0, bit 6 = 1.  Bits 5 - 0 specify a
              ; to) six      location to which you may move from this
              ;  words       location.
              ;              The first of these words specifies the
              ;              destination for the lowest-numbered bit
              ;              which is set in word 1; the second specifies
              ;              the destination for the next-lowest bit set
              ;              in word 1, etc.
              ;              Therefore, there must be one of these words
              ;              for each of the first six bits (5 - 0) set
              ;              in word 1 of this file.
              ;
              ; next (up  Bit 7 = 0, bit 6 = 0.  Bits 5 - 0 specify the
              ; to) eight    object number of an object at this location.
              ;  words       There may be as many as eight of these words,
              ;              or there may be none at all.
              ;
              RYHALL = $08
007D 88       SOCM:   .BYTE $88 ; LOCNUM = 8            Royal Hall
007E 3F               .BYTE $3F ; Directions: N,E,S,W,U,D
007F 4E               .BYTE $4E ; N to Grotto (E)
0080 43               .BYTE $43 ; E to Stone Steps (3)
0081 4C               .BYTE $4C ; S to Tight Shaft  (C)
0082 4D               .BYTE $4D ; W to N. Pit (D)
0083 52               .BYTE $52 ; U to Attic (12)
0084 50               .BYTE $50 ; D to Chute (10)
0085 00       DRAGAD: .BYTE $00 ; Dragon
              ;
0086 94               .BYTE $94 ; LOCNUM = 14           Tunnel
0087 11               .BYTE $11 ; Directions: N,U
0088 4A               .BYTE $4A ; N to Bird Room (A)
0089 45               .BYTE $45 ; U to Steel Grate (5)
008A 03               .BYTE $03 ; Rod
              ;
008B 95               .BYTE $95 ; LOCNUM = 15           2-Inch Slit
008C 05               .BYTE $05 ; Directions: N,S
008D 4B               .BYTE $4B ; N to Stream (B)
008E 45               .BYTE $45 ; S to Steel Grate (5)
              ;
008F 96               .BYTE $96 ; LOCNUM = 16           Glen
0090 02               .BYTE $02 ; Directions: E
0091 4B               .BYTE $4B ; E to Stream (B)
              ;
0092 8F               .BYTE $8F ; LOCNUM = F            Oyster-Bed
0093 10               .BYTE $10 ; Directions: U
0094 44               .BYTE $44 ; U to Blue Den (4)
0095 06               .BYTE $06 ; Pearls
              ;
0096 80               .BYTE $80 ; LOCNUM = 0            Cellar
0097 50               .BYTE $50 ; Directions: U, Magic
                                ;  (Magic to Stone Steps)
0098 49               .BYTE $49 ; U to (at) House (9)
0099 05               .BYTE $05 ; Cage
009A 02               .BYTE $02 ; Rope
009B 04               .BYTE $04 ; File
              ;
009C 81               .BYTE $81 ; LOCNUM = 1            Purple Oracle
009D 0A               .BYTE $0A ; Directions: W,E
009E 4A               .BYTE $4A ; E to Bird Room (A)
009F 43               .BYTE $43 ; W to Stone Steps (3)
              ;
00A0 82               .BYTE $82 ; LOCNUM = 2            Red Room
00A1 52               .BYTE $52 ; Directions: E,U,Magic
                                ;  (Magic to Cellar)
00A2 47               .BYTE $47 ; E to Gully (7)
00A3 52               .BYTE $52 ; U to Attic (12)
00A4 07               .BYTE $07 ; Gold
              ;
00A5 83               .BYTE $83 ; LOCNUM = 3            Stone Steps
00A6 70               .BYTE $70 ; Directions: U,D,Magic
                                ;  (Magic to Cellar)
00A7 41               .BYTE $41 ; U to Purple Oracle (1)
00A8 48               .BYTE $48 ; D to Royal Hall (8)
              ;
00A9 84               .BYTE $84 ; LOCNUM = 4            Blue Den
00AA 61               .BYTE $61 ; Directions: N,D,Magic
                                ;  (Magic to Cellar)
00AB 46               .BYTE $46 ; N to Hole (6)
00AC 4F               .BYTE $4F ; D to Oyster-Bed (F)
              ;
              STGRAT = $05
00AD 85               .BYTE $85 ; LOCNUM = 5            Steel Grate
00AE 21               .BYTE $21 ; Directions: N,D
00AF 55               .BYTE $55 ; N to 2-Inch Slit (15)
00B0 54               .BYTE $54 ; D to Tunnel (14)
              ;
              HOLE = $06
00B1 86               .BYTE $86 ; LOCNUM = 6            Hole
00B2 00               .BYTE $00 ; Directions: None!
              ;
              GULLY = $07
00B3 87               .BYTE $87 ; LOCNUM = 7            Gully
00B4 0C               .BYTE $0C ; Directions: S,W
00B5 4E               .BYTE $4E ; S to Grotto (E)
00B6 42               .BYTE $42 ; W to Red Room (2)
              ;
00B7 89               .BYTE $89 ; LOCNUM = 9            House
00B8 2E               .BYTE $2E ; Directions: E,S,W,D
00B9 57               .BYTE $57 ; E to Forest (17)
00BA 4B               .BYTE $4B ; S to Stream (B)
00BB 56               .BYTE $56 ; W to Glen (16)
00BC 40               .BYTE $40 ; D to Cellar (0)
              ;
00BD 8A               .BYTE $8A ; LOCNUM = A            Bird Room
00BE 0C               .BYTE $0C ; Directions: S,W
00BF 54               .BYTE $54 ; S to Tunnel (14)
00C0 41               .BYTE $41 ; W to Purple Oracle (1)
00C1 01               .BYTE $01 ; Bird
              ;
00C2 8B               .BYTE $8B ; LOCNUM = B            Stream
00C3 0F               .BYTE $0F ; Directions: N,E,S,W
00C4 49               .BYTE $49 ; N to House (9)
00C5 57               .BYTE $57 ; E to Forest (17)
00C6 55               .BYTE $55 ; S to 2-Inch Slit (15)
00C7 56               .BYTE $56 ; W to Glen (16)
              ;
00C8 8C               .BYTE $8C ; LOCNUM = C            Tight Shaft
00C9 30               .BYTE $30 ; Directions: U,D
00CA 52               .BYTE $52 ; U to Attic (12)
00CB 53               .BYTE $53 ; D to S. Pit (13)
              ;
              NPIT = $0D
00CC 8D               .BYTE $8D ; LOCNUM = D            N. Pit
00CD 2A               .BYTE $2A ; Directions: E,W,D
00CE 51               .BYTE $51 ; E to E. Pit (11)
00CF 50               .BYTE $50 ; W to Chute (10)
00D0 46               .BYTE $46 ; D to Hole (6)
              ;
00D1 8E               .BYTE $8E ; LOCNUM = E            Grotto
00D2 0D               .BYTE $0D ; Directions: N,S,W
00D3 43               .BYTE $43 ; N to Stone Steps (3)
00D4 4D               .BYTE $4D ; S to N. Pit (D)
00D5 47               .BYTE $47 ; W to Gully (7)
              ;
00D6 97               .BYTE $97 ; LOCNUM = 17           Forest
00D7 09               .BYTE $09 ; Directions: N,W
00D8 49               .BYTE $49 ; N to House (9)
00D9 4B               .BYTE $4B ; W to Stream (B)
              ;
00DA 90               .BYTE $90 ; LOCNUM = 10           Chute
00DB 20               .BYTE $20 ; Directions: D
00DC 4C               .BYTE $4C ; D to Tight Shaft (C)
              ;
00DD 91               .BYTE $91 ; LOCNUM = 11           E. Pit
00DE 35               .BYTE $35 ; Directions: N,S,U,D
00DF 4D               .BYTE $4D ; N to N. Pit (D)
00E0 53               .BYTE $53 ; S to S. Pit (13)
00E1 4C               .BYTE $4C ; U to Tight Shaft (C)
00E2 46               .BYTE $46 ; D to Hole (6)
              ;
00E3 92               .BYTE $92 ; LOCNUM = 12           Attic
00E4 20               .BYTE $20 ; Directions: D
00E5 48               .BYTE $48 ; D to Royal Hall (8)
              ;
00E6 93               .BYTE $93 ; LOCNUM = 13           S. Pit
00E7 33               .BYTE $33 ; Directions: N,E,U,D
00E8 4D               .BYTE $4D ; N to N. Pit (D)
00E9 51               .BYTE $51 ; E to E. Pit (11)
00EA 52               .BYTE $52 ; U to Attic (12)
00EB 44               .BYTE $44 ; D to Blue Den (4)
              ;
              ; EGO File ("File of the self")
              ;       Behaves like any other location, except that the
              ;       "Directions" word is used for the Most Significant
              ;       Half of the double precision MOVES counter.  This
              ;       file is initially empty; objects picked up by the
              ;       adventurer are placed here until they are dropped.
              ;
00EC 9F               .BYTE $9F ; LOCNUM = 1F           EGO File
00ED 00               .BYTE $00 ; M.S.H. of MOVES
00EE 9F       EOCM:   .BYTE $9F ; End Of Cave Map Flag (a constant)
              ;
              ; KIM monitor locations used by KIM-VENTURE
              ;
00EF 00       YSAV:   .BYTE $00 ; Used by LIGHT S/R to save Y-Reg.
                                ;     This location is destroyed each
                                ;     time ADDOBJ is called -- EOCM
                                ;     gets written here.
00F0 00 00 00 00 00 00 00       WINDO:  .BYTE $00,$00,$00,$00,$00,$00,$00
                                ; Display window for LIGHT S/R. Really
                                ;     only need six, but for the fact
                                ;     that FILMSG keeps unpacking msg's
                                ;     till it ends on a whole byte --
                                ;     thus clobbering 1 or 2 extras...
00F7 00       DIR:    .BYTE $00 ; Direction moved. 0=N,....,5=D.
              ;
              ** = $00FC
00FC 00       TEMP:   .BYTE $00 ; Used by LIGHT and monitor together.
00FD 00       LCTR:   .BYTE $00 ; Letter-counter for FILMSG.
00FE 00       DISNXM: .BYTE $00 ; Display-next-message flag.  If nonzero,
                                ;     FILMSG will add DISNXM to ADL of
                                ;     message (POINTR) and start over.

              RAM     = PART1
00FF        .OUTPUT RAM,ENDPRG
              ** = RAM

              ; These zero page locations are overwritten
              MOVMSH = $60
              BCDLSH = $61
              BCDMSH = $62
              OBCELR = $63

              ; K - V SCORE   Â© Copyright R.C.Leedom 1979
              ;      The K-V SCORE program is to be loaded
              ;      immediately following a KIM-VENTURE
              ;      game, and run starting at location
              ;      $100.  K-V SCORE will provide a rating
              ;      (which may be from Class A all the
              ;      way down to J, or -- at the bottom --
              ;      Class O), and a count of the moves
              ;      made by the player (up to 9999).
              ** = PART1
0100 4C 24 01 KVSCOR: JMP BGNSCR
              ;
              ; LOCSCH (Location Search) Subroutine.
              ;      Created from KIM-VENTURE's NEWLOC,
              ;      this S/R (when called with A-reg =
              ;      location number) will search for the
              ;      location file and return LOCAD
              ;      in the X-register.
0103 85 45    LOCSCH: STA LOCNUM     ; Save location number.
0105 A2 7B            LDX #SOCM-2    ; Start-of-cave-map is
                                     ;    used as starting
                                     ;    point for file search.
0107 E8       CKLNUM: INX
0108 E8       CKLNLP: INX
0109 B5 00            LDA 0,X        ; Is this a start-of-file?
010B 10 FB            BPL CKLNLP     ; No.  Keep looking.
010D 86 42            STX LOCAD      ; Yes, save file address,
010F 29 1F            AND #$1F       ;    and see if it's the
0111 C5 45            CMP LOCNUM     ;    one we want ...
0113 D0 F2            BNE CKLNUM     ; No. Look for next file.
0115 60               RTS            ; Yes.  Done, so return.
              ;
              ; VISCHK (Visit Check) Subroutine.  Call with
              ;      A-reg = location number.  S/R will re-
              ;      turn A-reg <0 if location was visited,
              ;      else A-reg >0.
0116 20 03 01 VISCHK: JSR LOCSCH     ; Go get LOCAD in X-reg.
0119 B5 00            LDA 0,X        ; Now we get header word of
011B 0A               ASL            ; location file, shifted
011C 0A               ASL            ; to show "visit" bit,
011D 60               RTS            ; and return.
              ;
011E 6D 58 5C       SCRMSG: .BYTE $6D,$58,$5C ; Data for "SCORE " msg.
0121 50 79 00               .BYTE $50,$79,$00
              ;
              ; BGNSCR (Begin Scoring) segment. (Main prog.)
              ;
0124 A2 06    BGNSCR: LDX #6         ; Display the six
0126 BD 1D 01 SCMLP:  LDA SCRMSG-1,X ;   characters of the
0129 95 EF            STA WINDO-1,X  ;   score message:
012B CA               DEX            ;   save them in the
012C D0 F8            BNE SCMLP      ;   window, indicate
012E 86 FE            STX DISNXM     ;   "no more displays",
0130 20 E9 02         JSR DONFIL     ;   and call a few LIGHTs.
              ; MVCONV (Move Conversion) segment.  Converts
              ;      the double precision move counter to
              ;      a decimal number (up to four digits).
0133 18       MVCONV: CLC
0134 F8               SED            ; Set decimal mode.
0135 A9 00            LDA #0         ; Clear Binary Coded
0137 85 61            STA BCDLSH     ;   Decimal, Least and
0139 85 62            STA BCDMSH     ;   Most Signif. Halves.
013B A5 4C            LDA MOVES      ; Is LSH = 0?
013D F0 10            BEQ MSADD      ; Yes, go add up MSH.
                      ;
013F A5 61    LSADD:  LDA BCDLSH     ; For LSH, a double
0141 69 01            ADC #1         ;   precision add
0143 85 61            STA BCDLSH     ;   of one count
0145 A5 62            LDA BCDMSH     ;   for each unit
0147 69 00            ADC #0         ;   of the LSH of
0149 85 62            STA BCDMSH     ;   the move counter.
014B C6 4C            DEC MOVES
014D D0 F0            BNE LSADD
                      ;
014F A6 41    MSADD:  LDX EGOLAD     ; Get MSH of the move
0151 B5 01            LDA 1,X        ;   counter, save it,
0153 85 60            STA MOVMSH     ;   and if zero, we
0155 F0 10            BEQ DSPFIL     ;   are done...
                      ;
0157 A5 61    MSAD1:  LDA BCDLSH     ; For MSH, a double
0159 69 56            ADC #$56       ;   precision add of
015B 85 61            STA BCDLSH     ;   256 counts
015D A5 62            LDA BCDMSH     ;   for each unit
015F 69 02            ADC #2         ;   of the MSH of
0161 85 62            STA BCDMSH     ;   the move counter.
0163 D6 01            DEC 1,X
0165 D0 F0            BNE MSAD1
              ;
              ; DSPFIL (Display Fill) segment.  Fills the
              ;      display window with digits corresponding
              ;      to score, and blanks (up to) two leading
              ;      zeroes.
0167 D8       DSPFIL: CLD
0168 A5 61            LDA BCDLSH     ; For LSH of score,
016A 29 0F            AND #$F        ;   get lower digit and
016C AA               TAX            ;   corresponding segment
016D BD E7 1F         LDA DIGCOD,X   ;   code from monitor, and
0170 85 F5            STA WINDO+5    ;   put in display window.
0172 A5 61            LDA BCDLSH     ; Similarly, get upper
0174 4A               LSR            ;   digit of LSH of
0175 4A               LSR
0176 4A               LSR
0177 4A               LSR            ;   score, use to get
0178 AA               TAX            ;   segment code from
0179 BD E7 1F         LDA DIGCOD,X   ;   KIM monitor, and put
017C 85 F4            STA WINDO+4    ;   in display window.
017E A5 62            LDA BCDMSH     ; For MSH of score,
0180 4A               LSR            ;   first get upper digit.
0181 4A               LSR
0182 4A               LSR
0183 4A               LSR
0184 A8               TAY            ; Is it zero?
0185 F0 04            BEQ LZ1BNK     ; Yes, blank it.
                      ;
0187 AA               TAX            ; Use nonzero upper digit
0188 BD E7 1F         LDA DIGCOD,X   ;   to get segment code.
018B 85 F2    LZ1BNK: STA WINDO+2    ; Put MS digit in window.
018D A5 62            LDA BCDMSH     ; Get next most signif.
018F 29 0F            AND #$F        ;   digit and
0191 AA               TAX            ;   save it.
0192 98               TYA            ; Was MS digit zero?
0193 D0 03            BNE NOBNK2     ; No, so don't blank
                      ;                  this digit.
0195 8A               TXA            ; Yes, is this one zero?
0196 F0 03            BEQ LZBNK2     ; Yes -- both zero!  Go
                      ;                  blank this one too.
0198 BD E7 1F NOBNK2: LDA DIGCOD,X   ; Get code for 2nd MSD.
019B 85 F3    LZBNK2: STA WINDO+3    ; Fill the remaining
                      ;                  slot of the window.
              ; CLASS segment.  The remaining code
              ;      determines the player's classificatino
              ;      based on what was accomplished in the
              ;      course of the game.
019D A2 71    CLASS:  LDX #$71       ; Class F if
019F A5 45            LDA LOCNUM
01A1 C9 06            CMP #6         ;    in the hole
01A3 D0 06            BNE CELSCH
01A5 A5 3E            LDA BURDEN
01A7 29 04            AND #4         ;    without the rope.
01A9 F0 28            BEQ WSLNK      ;    Go show "F".
                      ;
01AB A9 00    CELSCH: LDA #0         ; Cellar search to see
01AD 85 63            STA OBCELR     ;    if any treasures
01AF 20 03 01         JSR LOCSCH     ;    have been left
01B2 A0 01            LDY #1         ;    here...
01B4 20 80 17         JSR LOBSCH
01B7 84 48            STY NOBS       ; Anything here?
01B9 F0 15            BEQ CVLINK     ; No, check cave visits.
01BB B4 00    OBCSET: LDY 0,X        ; Yes, so set up
01BD A5 63            LDA OBCELR     ;    OBCELR which will
01BF 19 4C 00         ORA OBJMSK-1,Y ;    have a bit set for
01C2 85 63            STA OBCELR     ;    each object left
01C4 CA               DEX            ;    in the cellar.
01C5 C6 48            DEC NOBS
01C7 D0 F2            BNE OBCSET
01C9 A2 39            LDX #$39       ; Class C if only one
01CB 0A               ASL            ;    treasure here.
01CC 30 08            BMI PICLNK     ; Pearls. See if Gold too.
01CE B0 03            BCS WSLNK      ; No Pearls, Gold only.
01D0 4C 12 02 CVLINK: JMP CAVIS      ; Neither, check cave visits.
01D3 4C 64 02 WSLNK:  JMP WINSET     ; Go set window with class.
01D6 4C 00 02 PICLNK: JMP PIC        ; Continue cellar check.

              ; Note that 1D9 - 1FF not used.  Cellar
              ;      check continues in Page 2...  At
              ;      this point we have verified that
              ;      the Pearls are there and are
              ;      testing for Gold.  A-reg has been
              ;      preloaded with Class C.
              ** = PART2
0200 90 D1    PIC:    BCC WSLNK      ; Pearls only. Class C.
0202 A2 7C            LDX #$7C       ; Have placed both
0204 A5 62            LDA BCDMSH     ;    treasures in the cellar,
0206 D0 CB            BNE WSLNK      ;    but unless done in
0208 A9 40            LDA #$40       ;    less than 41 moves,
020A C5 61            CMP BCDLSH     ;    this is only
020C 90 C5            BCC WSLNK      ;    Class B.
020E A2 77            LDX #$77       ; Class A for both in
0210 D0 C1            BNE WSLNK      ;    cellar, moves <= 40!
                      ;
0212 A9 02    CAVIS:  LDA #2         ; No treasures returned.
0214 20 16 01         JSR VISCHK     ; Visited Red Room?
0217 10 1A            BPL DRAGCK     ;    No.
0219 A9 0F            LDA #$F
021B 20 16 01         JSR VISCHK     ; Visited Oyster-Bed?
021E 10 13            BPL DRAGCK     ;    No.
                      ;
                      ; Have found (but not recovered) both
                      ;     treasures, so at least Class E.
                      ;     See if visited all rooms of
                      ;     caverns to earn Class D....
0220 A0 12            LDY #$12
0222 98       VISCLP: TYA
0223 20 16 01         JSR VISCHK     ; Visited this one?
0226 30 04            BMI NXVCLP     ; Yes, keep checking.
0228 A2 79            LDX #$79       ; No, missed one, so
022A D0 A7            BNE WSLNK      ;    show Class E.
                      ;
022C 88       NXVCLP: DEY            ; Checked 0 thru $12?
022D 10 F3            BPL VISCLP     ; Not yet.
022F A2 5E            LDX #$5E       ; Yes, and all were visited,
0231 D0 A0            BNE WSLNK      ;    so show Class D.
                      ;
                      ; In the code below, no qualifications
                      ;     have yet been met, so we'll
                      ;     first see if Class G has been
                      ;     earned either by scaring off the
                      ;     Dragon or by using the F-key....
0233 A2 3D    DRAGCK: LDX #$3D
0235 A5 40            LDA DRAGON
0237 F0 9A            BEQ WSLNK      ; Dragon is gone!
0239 A5 3D            LDA NMBUTS
023B D0 96            BNE WSLNK      ; F-key used correctly!
                      ;
                      ; Continuing, let's see if he at
                      ;     least got into the caverns....
023D A9 14    TUNCK:  LDA #$14
023F 20 16 01         JSR VISCHK
0242 A2 76            LDX #$76
0244 A8               TAY            ; Visited Tunnel?
0245 30 8C            BMI WSLNK      ; Yes, show Class H.
                      ;
                      ; Well, did he even get into the
                      ;     cellar of the house....?
0247 A9 00            LDA #0
0249 20 16 01         JSR VISCHK
024C A2 06            LDX #6
024E A8               TAY            ; Visited Cellar?
024F 30 82            BMI WSLNK      ; Yes, show Class I.
                      ;
                      ; OK, maybe he forgot he could use
                      ;     up and down as directions.
                      ;     But did he do all the exploring
                      ;     possible with just N,E,S, and W?
0251 A0 04            LDY #4
0253 B9 70 02 ABOVLP: LDA VISTBL,Y   ; Visited House, Glen,
0256 20 16 01         JSR VISCHK     ;   Slit, Forest, Grate?
0259 30 04            BMI ABVCON
025B A2 3F            LDX #$3F       ; No, missed one --
025D D0 05            BNE WINSET     ;   show Class O.
                      ;
025F 88       ABVCON: DEY            ; Checked all 5 yet?
0260 10 F1            BPL ABOVLP     ; No, keep checking.
0262 A2 1E            LDX #$1E       ; Yes, show Class J.
                      ;
                      ;
0264 86 F0    WINSET: STX WINDO      ; Put class in window,
0266 A9 40            LDA #$40       ;    put dash after
0268 85 F1            STA WINDO+1    ;    that, and
026A 20 00 00 END:    JSR LIGHT      ;    endlessly show
026D 4C 6A 02         JMP END        ;    Class & Moves.
              ;
              ;
0270 05 09 15       VISTBL: .BYTE $05,$09,$15 ; Table of places to
0273 16 17               .BYTE $16,$17     ;    visit above-ground.

              ENDPRG = **-1
              ;  Need this routine
              ** = $02E9
02E9 A0 C0    DONFIL: LDY #$C0       ; **($02EA)=Display speed**
              DSPSPD = **-1          ; Save into symbol table.
02EB 20 00 00 SHMSG:  JSR LIGHT      ; Make several calls to
02EE 20 00 00         JSR LIGHT      ;    the display/keyboard
02F1 88               DEY            ;    subroutines.
02F2 D0 F7            BNE SHMSG
02F4 A6 FE            LDX DISNXM     ; Display another word?
02F6 D0 07            BNE FLM1       ; Yes.  Go do it.
02F8 60               RTS            ; No.  Return with key (if
                      ;                   any) in A-reg.  If no
                      ;                   key hit, A = $15.

              ** = PART3

              ;
              ; LOBSCH (Last Object Search) subrouting.
              ;      Finds, and saves in LOBJAD, the address
              ;      of the last object in a file; also
              ;      counts, and returns in Y-reg, the number
              ;      of objects in the file.  File to search
              ;      is EGO file if called with Y=0; is
              ;      file at LOCAD if called with Y=1.
              ;
1780 B6 41    LOBSCH: LDX EGOLAD,Y   ; Get pointer to file.
1782 A0 FF            LDY #$FF       ; Init object-count.
                      ;
1784 E8       OBFIND: INX
1785 86 44            STX LOBJAD     ; Save addr of last obj.
1787 B5 01            LDA 1,X        ; Set up to test bits
1789 0A               ASL            ;   7 & 6 of each location.
178A 30 F8            BMI OBFIND     ; b6=1.  Not an object.
178C C8               INY            ; Bump object-count.
178D 90 F5            BCC OBFIND     ; b7=0. An object. Continue.
178F 60               RTS            ; b7=1. End of file. Done.
              ;
              ;
              ;
              ; ADDOBJ (Add Object) subroutine.  Called to
              ;      add a dropped object to a location file,
              ;      or a picked-up object to EGO file.
              ;      LINTAX is the pointer to the address of
              ;      the location of interest: 0 for EGO,
              ;      1 for file specified by LOCAD.  Calls
              ;      LOBSCH subroutine.  Object to be added
              ;      is specified by contents of OBJ.
              ;
1790 A4 43    ADDOBJ: LDY LINTAX     ; Point to file of interest.
1792 20 80 17         JSR LOBSCH     ; Find last obj's address.
1795 A2 EE            LDX #EOCM      ; Start at End of Cave Map.
1797 B5 00    AOBLP:  LDA 0,X        ; Move all files up one
1799 95 01            STA 1,X        ;    location to make room
179B CA               DEX            ;    for the object.
179C E4 44            CPX LOBJAD     ; Done yet?
179E D0 F7            BNE AOBLP      ; No.  Keep moving.
17A0 A5 49            LDA OBJ        ; Yes, store object just
17A2 95 01            STA 1,X        ;    above last object in
17A4 60               RTS            ;    the file; return.
              ;
              ;
              ; SPROC (Special Processing) segment.
              ;      Entered from Main Move Loop (MNMVLP)
              ;      following a "direction" command, this
              ;      code takes care of any special pro-
              ;      hibitions against moving in the com-
              ;      manded direction. (Examples -- can't
              ;      go through a steel grate, or past a
              ;      dragon.)  Possible exits from a SPROC
              ;      are: to MOVER, if no problems with
              ;                the command direction,
              ;           to HOWMSG, if "How ? " is to be
              ;                shown to indicate improper
              ;                conditions for the move, or
              ;           to MSGAML, showing "Halted By
              ;                The Dragon", if appropriate.
              ;
17A5 A8       SPROC:  TAY
17A6 84 F7            STY DIR        ; Save direction for MOVER.
17A8 A6 45            LDX LOCNUM
17AA B5 65            LDA LNAMAD,X   ; If at grate (or gully),
17AC D5 4F            CMP ADOPGR-5,X ;    is grate open (or is
                      ;                   bridge made)?
17AE F0 08            BEQ SPATS      ; Yes, move is OK.
17B0 E0 05            CPX #[ADGRM-LNAMAD] ; No. At closed
                      ;                           grate?
17B2 F0 24            BEQ SPCHKD     ; Yes, disallow Down.
17B4 E0 07            CPX #[ADGYM-LNAMAD] ; At bridgeless
                      ;                           gully?
17B6 F0 22            BEQ SPCHKW     ; Yes, disallow West.
17B8 E0 0C    SPATS:  CPX #[ADTSM-LNAMAD] ; At shaft?
17BA D0 04            BNE SPATSS
17BC A5 47            LDA NOBCRY     ; Yes, carrying anything?
17BE D0 18            BNE SPCHKD     ; Yes, disallow Down.
                      ;
17C0 E0 03    SPATSS: CPX #[ADSSM-LNAMAD] ; At steps?
17C2 D0 04            BNE SPATRH
17C4 A5 3E            LDA BURDEN     ; Yes, carrying Gold?
17C6 30 11            BMI SPCHKU     ; Yes, disallow Up.
                      ;
17C8 E0 08    SPATRH: CPX #[ADRHM-LNAMAD] ; At Royal Hall?
17CA D0 15            BNE SPCONT
17CC A5 40            LDA DRAGON     ; Yes, is Dragon there?
17CE F0 11            BEQ SPCONT
17D0 88               DEY            ; Yes, but going East
17D1 F0 0E            BEQ SPCONT     ;    is OK.  Continue.
17D3 A0 FF            LDY #<HBDMS     ; All other directions,
17D5 4C FF FF         JMP MSGAML     ;    "Halted by Dragon."
                      ;
17D8 88       SPCHKD: DEY            ; Check for Down,
17D9 88       SPCHKU: DEY            ;       for Up, or
17DA C0 03    SPCHKW: CPY #3         ;       for West.
17DC D0 03            BNE SPCONT     ; Other directions are OK.
17DE 4C FF FF         JMP HOWMSG     ; Disallowed direction
                      ;                   produces "How ? ".
                      ;
17E1 4C FF FF SPCONT: JMP MOVER      ; Continue Move process.
                      ;
                      ;
                      ;
                      ;
              ;  These three bytes
              ;  are left spare for
              ;  user expansion....
ABOVLP   $ 253
ABVCON   $ 25F
ADBRDG   $  56
ADDOBJ   $1790
ADGRM    $  6A
ADGYM    $  6C
ADOPGR   $  54
ADRHM    $  6D
ADSSM    $  68
ADTSM    $  71
AOBLP    $1797
BCDLSH   $  61
BCDMSH   $  62
BGNSCR   $ 124
BURDEN   $  3E
CAVIS    $ 212
CELSCH   $ 1AB
CKLNLP   $ 108
CKLNUM   $ 107
CLASS    $ 19D
CONVD    $1F48
CVLINK   $ 1D0
CYMSAD   $  62
DIGCOD   $1FE7
DIR      $  F7
DISNXM   $  FE
DLOBAD   $  3F
DONFIL   $ 2E9
DRAGAD   $  85
DRAGCK   $ 233
DRAGON   $  40
DSPFIL   $ 167
DSPSPD   $ 2EA
EGOLAD   $  41
END      $ 26A
ENDPRG   $ 274
EOCM     $  EE
FLM1     $FFFF *
FUTBL    $  21
GETKEY   $1F6A
GULLY    $   7
HBDMS    $FFFF *
HOLE     $   6
HOWMSG   $FFFF *
IUTBL    $  2F
KBG      $  18
KEYS     $1F3D
KVSCOR   $ 100
LCTR     $  FD
LIGHT    $   0
LINTAX   $  43
LITELP   $   B
LNAMAD   $  65
LOBJAD   $  44
LOBSCH   $1780
LOCAD    $  42
LOCNUM   $  45
LOCSCH   $ 103
LSADD    $ 13F
LZ1BNK   $ 18B
LZBNK2   $ 19B
MBCODE   $  3C
MBUT     $  46
MOVER    $FFFF *
MOVES    $  4C
MOVMSH   $  60
MSAD1    $ 157
MSADD    $ 14F
MSGAML   $FFFF *
MVCONV   $ 133
NMBUTS   $  3D
NOBCRY   $  47
NOBNK2   $ 198
NOBS     $  48
NPIT     $   D
NXVCLP   $ 22C
OBCELR   $  63
OBCSET   $ 1BB
OBFIND   $1784
OBJ      $  49
OBJMSK   $  4D
OBMSAD   $  57
PADD     $1741
PART1    $ 100
PART2    $ 200
PART3    $1780
PIC      $ 200
PICLNK   $ 1D6
POINTR   $  4A
RAM      $ 100
RYHALL   $   8
SCDU     $  55
SCMLP    $ 126
SCRMSG   $ 11E
SGNPST   $  3B
SHMSG    $ 2EB
SOCM     $  7D
SPATRH   $17C8
SPATS    $17B8
SPATSS   $17C0
SPCHKD   $17D8
SPCHKU   $17D9
SPCHKW   $17DA
SPCONT   $17E1
SPROC    $17A5
STGRAT   $   5
TEMP     $  FC
TIMER    $1706
TUNCK    $ 23D
UINMAD   $  5F
VISCHK   $ 116
VISCLP   $ 222
VISTBL   $ 270
WINDO    $  F0
WINSET   $ 264
WSLNK    $ 1D3
YSAV     $  EF
